/* This file was generated by SableCC (http://www.sablecc.org/). */

package grammar.ini.parser;

import grammar.ini.analysis.Analysis;
import grammar.ini.analysis.AnalysisAdapter;
import grammar.ini.lexer.Lexer;
import grammar.ini.lexer.LexerException;
import grammar.ini.node.*;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprog1Prog */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprog2Prog */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAprog3Prog */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAprog4Prog */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAprog5Prog */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list);
            }
            break;
            case 5: /* reduce AAprog6Prog */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list);
            }
            break;
            case 6: /* reduce AAprog7Prog */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list);
            }
            break;
            case 7: /* reduce AAprog8Prog */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list);
            }
            break;
            case 8: /* reduce AGlobal */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AAmaindclmaindcl1Maindcl */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce AAmaindclmaindcl2Maindcl */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list);
            }
            break;
            case 11: /* reduce AAclassdclclassdcl1Classdcl */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce AAclassdclclassdcl2Classdcl */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list);
            }
            break;
            case 13: /* reduce AAclassdclclassdcl3Classdcl */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list);
            }
            break;
            case 14: /* reduce AAclassdclclassdcl4Classdcl */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list);
            }
            break;
            case 15: /* reduce ADclClassbody */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce AEventdclClassbody */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list);
            }
            break;
            case 17: /* reduce AAfuncdclclassbody1Classbody */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list);
            }
            break;
            case 18: /* reduce AAfuncdclclassbody2Classbody */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list);
            }
            break;
            case 19: /* reduce AAfuncbody1Funcbody */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list);
            }
            break;
            case 20: /* reduce AAfuncbody2Funcbody */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list);
            }
            break;
            case 21: /* reduce AReturnidReturn */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list);
            }
            break;
            case 22: /* reduce AEmptyReturn */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list);
            }
            break;
            case 23: /* reduce AVardclStmt */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce AAssignmentStmt */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list);
            }
            break;
            case 25: /* reduce AAforupstmt1Stmt */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list);
            }
            break;
            case 26: /* reduce AAforupstmt2Stmt */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list);
            }
            break;
            case 27: /* reduce AAfordownstmt1Stmt */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list);
            }
            break;
            case 28: /* reduce AAfordownstmt2Stmt */
            {
                ArrayList<Object> list = new28();
                push(goTo(7), list);
            }
            break;
            case 29: /* reduce AAwhilestmt1Stmt */
            {
                ArrayList<Object> list = new29();
                push(goTo(7), list);
            }
            break;
            case 30: /* reduce AAwhilestmt2Stmt */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list);
            }
            break;
            case 31: /* reduce AClasscallStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list);
            }
            break;
            case 32: /* reduce AIfstmtStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(7), list);
            }
            break;
            case 33: /* reduce AVardclVardcl */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list);
            }
            break;
            case 34: /* reduce AVardclasgVardcl */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list);
            }
            break;
            case 35: /* reduce AListdclVardcl */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list);
            }
            break;
            case 36: /* reduce AAifstmt1Ifstmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(9), list);
            }
            break;
            case 37: /* reduce AAifstmt2Ifstmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list);
            }
            break;
            case 38: /* reduce AAifstmt3Ifstmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(9), list);
            }
            break;
            case 39: /* reduce AAifstmt4Ifstmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(9), list);
            }
            break;
            case 40: /* reduce AAelseelsestmt1Elsestmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(10), list);
            }
            break;
            case 41: /* reduce AAelseelsestmt2Elsestmt */
            {
                ArrayList<Object> list = new41();
                push(goTo(10), list);
            }
            break;
            case 42: /* reduce AAelseifelsestmt1Elsestmt */
            {
                ArrayList<Object> list = new42();
                push(goTo(10), list);
            }
            break;
            case 43: /* reduce AAelseifelsestmt2Elsestmt */
            {
                ArrayList<Object> list = new43();
                push(goTo(10), list);
            }
            break;
            case 44: /* reduce AAelseifelsestmt3Elsestmt */
            {
                ArrayList<Object> list = new44();
                push(goTo(10), list);
            }
            break;
            case 45: /* reduce AAelseifelsestmt4Elsestmt */
            {
                ArrayList<Object> list = new45();
                push(goTo(10), list);
            }
            break;
            case 46: /* reduce AOrBexpr */
            {
                ArrayList<Object> list = new46();
                push(goTo(11), list);
            }
            break;
            case 47: /* reduce ATermBexpr */
            {
                ArrayList<Object> list = new47();
                push(goTo(11), list);
            }
            break;
            case 48: /* reduce AAndBterm */
            {
                ArrayList<Object> list = new48();
                push(goTo(12), list);
            }
            break;
            case 49: /* reduce AFactorBterm */
            {
                ArrayList<Object> list = new49();
                push(goTo(12), list);
            }
            break;
            case 50: /* reduce ANotNotfactor */
            {
                ArrayList<Object> list = new50();
                push(goTo(13), list);
            }
            break;
            case 51: /* reduce AFactorNotfactor */
            {
                ArrayList<Object> list = new51();
                push(goTo(13), list);
            }
            break;
            case 52: /* reduce ARelationBfactor */
            {
                ArrayList<Object> list = new52();
                push(goTo(14), list);
            }
            break;
            case 53: /* reduce AEqualsRelation */
            {
                ArrayList<Object> list = new53();
                push(goTo(15), list);
            }
            break;
            case 54: /* reduce ANotequalsRelation */
            {
                ArrayList<Object> list = new54();
                push(goTo(15), list);
            }
            break;
            case 55: /* reduce AGreaterRelation */
            {
                ArrayList<Object> list = new55();
                push(goTo(15), list);
            }
            break;
            case 56: /* reduce ALessRelation */
            {
                ArrayList<Object> list = new56();
                push(goTo(15), list);
            }
            break;
            case 57: /* reduce AGreaterequalsRelation */
            {
                ArrayList<Object> list = new57();
                push(goTo(15), list);
            }
            break;
            case 58: /* reduce ALessequalsRelation */
            {
                ArrayList<Object> list = new58();
                push(goTo(15), list);
            }
            break;
            case 59: /* reduce AUnaryminRelation */
            {
                ArrayList<Object> list = new59();
                push(goTo(15), list);
            }
            break;
            case 60: /* reduce AExpressionRelation */
            {
                ArrayList<Object> list = new60();
                push(goTo(15), list);
            }
            break;
            case 61: /* reduce AMinusExpression */
            {
                ArrayList<Object> list = new61();
                push(goTo(16), list);
            }
            break;
            case 62: /* reduce APlusExpression */
            {
                ArrayList<Object> list = new62();
                push(goTo(16), list);
            }
            break;
            case 63: /* reduce ATermExpression */
            {
                ArrayList<Object> list = new63();
                push(goTo(16), list);
            }
            break;
            case 64: /* reduce ADivideTerm */
            {
                ArrayList<Object> list = new64();
                push(goTo(17), list);
            }
            break;
            case 65: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new65();
                push(goTo(17), list);
            }
            break;
            case 66: /* reduce AModTerm */
            {
                ArrayList<Object> list = new66();
                push(goTo(17), list);
            }
            break;
            case 67: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new67();
                push(goTo(17), list);
            }
            break;
            case 68: /* reduce AValueFactor */
            {
                ArrayList<Object> list = new68();
                push(goTo(18), list);
            }
            break;
            case 69: /* reduce AVarFactor */
            {
                ArrayList<Object> list = new69();
                push(goTo(18), list);
            }
            break;
            case 70: /* reduce AClasscallFactor */
            {
                ArrayList<Object> list = new70();
                push(goTo(18), list);
            }
            break;
            case 71: /* reduce AParenexprFactor */
            {
                ArrayList<Object> list = new71();
                push(goTo(18), list);
            }
            break;
            case 72: /* reduce ANumType */
            {
                ArrayList<Object> list = new72();
                push(goTo(19), list);
            }
            break;
            case 73: /* reduce ABoolType */
            {
                ArrayList<Object> list = new73();
                push(goTo(19), list);
            }
            break;
            case 74: /* reduce ATextType */
            {
                ArrayList<Object> list = new74();
                push(goTo(19), list);
            }
            break;
            case 75: /* reduce AObjectType */
            {
                ArrayList<Object> list = new75();
                push(goTo(19), list);
            }
            break;
            case 76: /* reduce ANumliteralVal */
            {
                ArrayList<Object> list = new76();
                push(goTo(20), list);
            }
            break;
            case 77: /* reduce ATextliteralVal */
            {
                ArrayList<Object> list = new77();
                push(goTo(20), list);
            }
            break;
            case 78: /* reduce ABoolliteralVal */
            {
                ArrayList<Object> list = new78();
                push(goTo(20), list);
            }
            break;
            case 79: /* reduce AAnewobjectval1Val */
            {
                ArrayList<Object> list = new79();
                push(goTo(20), list);
            }
            break;
            case 80: /* reduce AAnewobjectval2Val */
            {
                ArrayList<Object> list = new80();
                push(goTo(20), list);
            }
            break;
            case 81: /* reduce AAsinglefuncfunccall1Funccall */
            {
                ArrayList<Object> list = new81();
                push(goTo(21), list);
            }
            break;
            case 82: /* reduce AAsinglefuncfunccall2Funccall */
            {
                ArrayList<Object> list = new82();
                push(goTo(21), list);
            }
            break;
            case 83: /* reduce ASingleparamActualparam */
            {
                ArrayList<Object> list = new83();
                push(goTo(22), list);
            }
            break;
            case 84: /* reduce AMulparamActualparam */
            {
                ArrayList<Object> list = new84();
                push(goTo(22), list);
            }
            break;
            case 85: /* reduce ASingleparamFormalparam */
            {
                ArrayList<Object> list = new85();
                push(goTo(23), list);
            }
            break;
            case 86: /* reduce AMulparamFormalparam */
            {
                ArrayList<Object> list = new86();
                push(goTo(23), list);
            }
            break;
            case 87: /* reduce AMulcallClasscall */
            {
                ArrayList<Object> list = new87();
                push(goTo(24), list);
            }
            break;
            case 88: /* reduce ASingleClasscall */
            {
                ArrayList<Object> list = new88();
                push(goTo(24), list);
            }
            break;
            case 89: /* reduce AIdcallSinglecall */
            {
                ArrayList<Object> list = new89();
                push(goTo(25), list);
            }
            break;
            case 90: /* reduce AFunccallSinglecall */
            {
                ArrayList<Object> list = new90();
                push(goTo(25), list);
            }
            break;
            case 91: /* reduce ASignleMulticall */
            {
                ArrayList<Object> list = new91();
                push(goTo(26), list);
            }
            break;
            case 92: /* reduce AMultiMulticall */
            {
                ArrayList<Object> list = new92();
                push(goTo(26), list);
            }
            break;
            case 93: /* reduce AInherit */
            {
                ArrayList<Object> list = new93();
                push(goTo(27), list);
            }
            break;
            case 94: /* reduce AAeventdcl1Eventdcl */
            {
                ArrayList<Object> list = new94();
                push(goTo(28), list);
            }
            break;
            case 95: /* reduce AAeventdcl2Eventdcl */
            {
                ArrayList<Object> list = new95();
                push(goTo(28), list);
            }
            break;
            case 96: /* reduce AAeventdcl3Eventdcl */
            {
                ArrayList<Object> list = new96();
                push(goTo(28), list);
            }
            break;
            case 97: /* reduce AAeventdcl4Eventdcl */
            {
                ArrayList<Object> list = new97();
                push(goTo(28), list);
            }
            break;
            case 98: /* reduce ATerminal$Global */
            {
                ArrayList<Object> list = new98();
                push(goTo(29), list);
            }
            break;
            case 99: /* reduce ANonTerminal$Global */
            {
                ArrayList<Object> list = new99();
                push(goTo(29), list);
            }
            break;
            case 100: /* reduce ATerminal$Classdcl */
            {
                ArrayList<Object> list = new100();
                push(goTo(30), list);
            }
            break;
            case 101: /* reduce ANonTerminal$Classdcl */
            {
                ArrayList<Object> list = new101();
                push(goTo(30), list);
            }
            break;
            case 102: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new102();
                push(goTo(31), list);
            }
            break;
            case 103: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new103();
                push(goTo(31), list);
            }
            break;
            case 104: /* reduce ATerminal$Classbody */
            {
                ArrayList<Object> list = new104();
                push(goTo(32), list);
            }
            break;
            case 105: /* reduce ANonTerminal$Classbody */
            {
                ArrayList<Object> list = new105();
                push(goTo(32), list);
            }
            break;
            case 106: /* reduce ATerminal$Formalparam */
            {
                ArrayList<Object> list = new106();
                push(goTo(33), list);
            }
            break;
            case 107: /* reduce ANonTerminal$Formalparam */
            {
                ArrayList<Object> list = new107();
                push(goTo(33), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprog1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PPdcl ppdclNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        ppdclNode3 = (PPdcl)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogNode1 = new AProg(listNode2, ppdclNode3, listNode4);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprog2Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PPdcl ppdclNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ppdclNode4 = (PPdcl)nodeArrayList2.get(0);
        {
            // Block
        }

        pprogNode1 = new AProg(listNode3, ppdclNode4, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprog3Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PPdcl ppdclNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        ppdclNode3 = (PPdcl)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogNode1 = new AProg(listNode2, ppdclNode3, listNode4);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprog4Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PPdcl ppdclNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ppdclNode4 = (PPdcl)nodeArrayList2.get(0);
        {
            // Block
        }

        pprogNode1 = new AProg(listNode3, ppdclNode4, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAprog5Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PPdcl ppdclNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        ppdclNode3 = (PPdcl)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogNode1 = new AProg(listNode2, ppdclNode3, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAprog6Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PPdcl ppdclNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ppdclNode4 = (PPdcl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogNode1 = new AProg(listNode3, ppdclNode4, listNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAprog7Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PPdcl ppdclNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        ppdclNode3 = (PPdcl)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogNode1 = new AProg(listNode2, ppdclNode3, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAprog8Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PPdcl ppdclNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ppdclNode4 = (PPdcl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogNode1 = new AProg(listNode3, ppdclNode4, listNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AGlobal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        ppdclNode1 = (PPdcl)nodeArrayList1.get(0);
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAmaindclmaindcl1Maindcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        ppdclNode1 = new AMainPdcl(listNode2);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAmaindclmaindcl2Maindcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ppdclNode1 = new AMainPdcl(listNode3);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclassdclclassdcl1Classdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }

        ppdclNode1 = new AClassPdcl(tidNode2, listNode3, null);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassdclclassdcl2Classdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PInherit pinheritNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        pinheritNode4 = (PInherit)nodeArrayList4.get(0);

        ppdclNode1 = new AClassPdcl(tidNode2, listNode3, pinheritNode4);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassdclclassdcl3Classdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ppdclNode1 = new AClassPdcl(tidNode2, listNode4, null);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclassdclclassdcl4Classdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PInherit pinheritNode5;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList7.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pinheritNode5 = (PInherit)nodeArrayList4.get(0);

        ppdclNode1 = new AClassPdcl(tidNode2, listNode4, pinheritNode5);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADclClassbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        PPdcl ppdclNode2;
        ppdclNode2 = (PPdcl)nodeArrayList1.get(0);

        pbodyNode1 = new AClassBody(ppdclNode2);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AEventdclClassbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        PPdcl ppdclNode2;
        ppdclNode2 = (PPdcl)nodeArrayList1.get(0);

        pbodyNode1 = new AEventdclBody(ppdclNode2);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAfuncdclclassbody1Classbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        PPdcl ppdclNode2;
        {
            // Block
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBody pbodyNode5;
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        pbodyNode5 = (PBody)nodeArrayList7.get(0);

        ppdclNode2 = new AFuncPdcl(tidNode3, listNode4, pbodyNode5);
        }

        pbodyNode1 = new AClassBody(ppdclNode2);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAfuncdclclassbody2Classbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        PPdcl ppdclNode2;
        {
            // Block
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PBody pbodyNode6;
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        PParam pparamNode4;
        pparamNode4 = (PParam)nodeArrayList5.get(0);
	if(pparamNode4 != null)
	{
	  listNode5.add(pparamNode4);
	}
        }
        pbodyNode6 = (PBody)nodeArrayList8.get(0);

        ppdclNode2 = new AFuncPdcl(tidNode3, listNode5, pbodyNode6);
        }

        pbodyNode1 = new AClassBody(ppdclNode2);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAfuncbody1Funcbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PReturn preturnNode3;
        {
            // Block
        }
        preturnNode3 = (PReturn)nodeArrayList2.get(0);

        pbodyNode1 = new AFuncBody(listNode2, preturnNode3);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAfuncbody2Funcbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PReturn preturnNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        preturnNode4 = (PReturn)nodeArrayList3.get(0);

        pbodyNode1 = new AFuncBody(listNode3, preturnNode4);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AReturnidReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturn preturnNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        preturnNode1 = new AIdReturn(pexprNode2);
        }
	nodeList.add(preturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEmptyReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PReturn preturnNode1;
        {
            // Block

        preturnNode1 = new AEmptyReturn();
        }
	nodeList.add(preturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AVardclStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PPdcl ppdclNode2;
        ppdclNode2 = (PPdcl)nodeArrayList1.get(0);

        pstmtNode1 = new AVardclStmt(ppdclNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExpr pexprNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignmentStmt(tidNode2, pexprNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAforupstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        {
            // Block
        }

        pstmtNode1 = new AForupStmt(tidNode2, pexprNode3, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAforupstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList7.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstmtNode1 = new AForupStmt(tidNode2, pexprNode3, listNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAfordownstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        {
            // Block
        }

        pstmtNode1 = new AFordownStmt(tidNode2, pexprNode3, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAfordownstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList7.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstmtNode1 = new AFordownStmt(tidNode2, pexprNode3, listNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAwhilestmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        }

        pstmtNode1 = new AWhileStmt(pexprNode2, listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAwhilestmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmtNode1 = new AWhileStmt(pexprNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AClasscallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        pstmtNode1 = new AClasscallStmt(pcallNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIfstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PConditional pconditionalNode2;
        pconditionalNode2 = (PConditional)nodeArrayList1.get(0);

        pstmtNode1 = new AIfStmt(pconditionalNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AVardclVardcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        ppdclNode1 = new AVarPdcl(ptypeNode2, tidNode3);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVardclasgVardcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        PExpr pexprNode4;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        pexprNode4 = (PExpr)nodeArrayList5.get(0);

        ppdclNode1 = new AVarasgPdcl(ptypeNode2, tidNode3, pexprNode4);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AListdclVardcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList4.get(0);
        tidNode3 = (TId)nodeArrayList5.get(0);

        ppdclNode1 = new AListPdcl(ptypeNode2, tidNode3);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAifstmt1Ifstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditional pconditionalNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        }

        pconditionalNode1 = new AIfConditional(pexprNode2, listNode3, null);
        }
	nodeList.add(pconditionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAifstmt2Ifstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditional pconditionalNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pconditionalNode1 = new AIfConditional(pexprNode2, listNode4, null);
        }
	nodeList.add(pconditionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAifstmt3Ifstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditional pconditionalNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBranch pbranchNode4;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        }
        pbranchNode4 = (PBranch)nodeArrayList5.get(0);

        pconditionalNode1 = new AIfConditional(pexprNode2, listNode3, pbranchNode4);
        }
	nodeList.add(pconditionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAifstmt4Ifstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditional pconditionalNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBranch pbranchNode5;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pbranchNode5 = (PBranch)nodeArrayList6.get(0);

        pconditionalNode1 = new AIfConditional(pexprNode2, listNode4, pbranchNode5);
        }
	nodeList.add(pconditionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAelseelsestmt1Elsestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pbranchNode1 = new AElseBranch(listNode2);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAelseelsestmt2Elsestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pbranchNode1 = new AElseBranch(listNode3);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAelseifelsestmt1Elsestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
        {
            // Block
        }

        pbranchNode1 = new AElseifBranch(pexprNode2, listNode3, null);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAelseifelsestmt2Elsestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pbranchNode1 = new AElseifBranch(pexprNode2, listNode4, null);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAelseifelsestmt3Elsestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBranch pbranchNode4;
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
        {
            // Block
        }
        pbranchNode4 = (PBranch)nodeArrayList6.get(0);

        pbranchNode1 = new AElseifBranch(pexprNode2, listNode3, pbranchNode4);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAelseifelsestmt4Elsestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBranch pbranchNode5;
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pbranchNode5 = (PBranch)nodeArrayList7.get(0);

        pbranchNode1 = new AElseifBranch(pexprNode2, listNode4, pbranchNode5);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AOrBexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ATermBexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAndBterm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAndExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AFactorBterm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANotNotfactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANotExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AFactorNotfactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ARelationBfactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AEqualsRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AEqualsExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANotequalsRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ANotequalsExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AGreaterRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGreaterExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ALessRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALessExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AGreaterequalsRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGreaterequalsExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALessequalsRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALessequalsExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AUnaryminRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new AUnaryExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpressionRelation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMinusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce APlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATermExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ADivideTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivideExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AValueFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PVal pvalNode2;
        pvalNode2 = (PVal)nodeArrayList1.get(0);

        pexprNode1 = new AValExpr(pvalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AVarFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexprNode1 = new AIdExpr(tidNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AClasscallFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        pexprNode1 = new ACallExpr(pcallNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AParenexprFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANumType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        ptypeNode1 = new ANumType(tnumNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ATextType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TText ttextNode2;
        ttextNode2 = (TText)nodeArrayList1.get(0);

        ptypeNode1 = new ATextType(ttextNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AObjectType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AObjectType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANumliteralVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TNumval tnumvalNode2;
        tnumvalNode2 = (TNumval)nodeArrayList1.get(0);

        pvalNode1 = new ANumVal(tnumvalNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATextliteralVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TTextval ttextvalNode2;
        ttextvalNode2 = (TTextval)nodeArrayList1.get(0);

        pvalNode1 = new ATextVal(ttextvalNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ABoolliteralVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TBoolval tboolvalNode2;
        tboolvalNode2 = (TBoolval)nodeArrayList1.get(0);

        pvalNode1 = new ABoolVal(tboolvalNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAnewobjectval1Val */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        pvalNode1 = new AConstrVal(tidNode2, listNode3);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AAnewobjectval2Val */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvalNode1 = new AConstrVal(tidNode2, listNode4);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AAsinglefuncfunccall1Funccall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pcallNode1 = new AFuncCall(tidNode2, listNode3);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAsinglefuncfunccall2Funccall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcallNode1 = new AFuncCall(tidNode2, listNode4);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ASingleparamActualparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AMulparamActualparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ASingleparamFormalparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        pparamNode1 = new AFormalParam(ptypeNode2, tidNode3, listNode4);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AMulparamFormalparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        PParam pparamNode4;
        pparamNode4 = (PParam)nodeArrayList4.get(0);
	if(pparamNode4 != null)
	{
	  listNode5.add(pparamNode4);
	}
        }

        pparamNode1 = new AFormalParam(ptypeNode2, tidNode3, listNode5);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AMulcallClasscall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        PCall pcallNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pcallNode2 = (PCall)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcallNode1 = new AClassCall(pcallNode2, listNode4);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ASingleClasscall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        pcallNode1 = (PCall)nodeArrayList1.get(0);
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AIdcallSinglecall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pcallNode1 = new AVarCall(tidNode2);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AFunccallSinglecall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        pcallNode1 = (PCall)nodeArrayList1.get(0);
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ASignleMulticall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCall pcallNode1;
        pcallNode1 = (PCall)nodeArrayList1.get(0);
	if(pcallNode1 != null)
	{
	  listNode2.add(pcallNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AMultiMulticall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PCall pcallNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pcallNode1 = (PCall)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pcallNode1 != null)
	{
	  listNode3.add(pcallNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AInherit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInherit pinheritNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList2.get(0);

        pinheritNode1 = new AInherit(ptypeNode2);
        }
	nodeList.add(pinheritNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AAeventdcl1Eventdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }

        ppdclNode1 = new AEventPdcl(tidNode2, listNode3, listNode4);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AAeventdcl2Eventdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        ppdclNode1 = new AEventPdcl(tidNode2, listNode4, listNode5);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AAeventdcl3Eventdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        ppdclNode1 = new AEventPdcl(tidNode2, listNode3, listNode5);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AAeventdcl4Eventdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPdcl ppdclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        ppdclNode1 = new AEventPdcl(tidNode2, listNode4, listNode6);
        }
	nodeList.add(ppdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ATerminal$Global */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPdcl ppdclNode1;
        ppdclNode1 = (PPdcl)nodeArrayList1.get(0);
	if(ppdclNode1 != null)
	{
	  listNode2.add(ppdclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ANonTerminal$Global */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPdcl ppdclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppdclNode2 = (PPdcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppdclNode2 != null)
	{
	  listNode3.add(ppdclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ATerminal$Classdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPdcl ppdclNode1;
        ppdclNode1 = (PPdcl)nodeArrayList1.get(0);
	if(ppdclNode1 != null)
	{
	  listNode2.add(ppdclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANonTerminal$Classdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPdcl ppdclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppdclNode2 = (PPdcl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppdclNode2 != null)
	{
	  listNode3.add(ppdclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ATerminal$Classbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBody pbodyNode1;
        pbodyNode1 = (PBody)nodeArrayList1.get(0);
	if(pbodyNode1 != null)
	{
	  listNode2.add(pbodyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ANonTerminal$Classbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBody pbodyNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbodyNode2 = (PBody)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbodyNode2 != null)
	{
	  listNode3.add(pbodyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ATerminal$Formalparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParam pparamNode1;
        pparamNode1 = (PParam)nodeArrayList1.get(0);
	if(pparamNode1 != null)
	{
	  listNode2.add(pparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ANonTerminal$Formalparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParam pparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamNode2 = (PParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamNode2 != null)
	{
	  listNode3.add(pparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {15, SHIFT, 1}, {21, SHIFT, 2}, },
			{{-1, ERROR, 1}, {0, SHIFT, 8}, {1, SHIFT, 9}, {2, SHIFT, 10}, {3, SHIFT, 11}, {45, SHIFT, 12}, },
			{{-1, ERROR, 2}, {6, SHIFT, 14}, },
			{{-1, ERROR, 3}, {47, ACCEPT, -1}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 0}, {44, SHIFT, 15}, },
			{{-1, ERROR, 6}, {44, SHIFT, 18}, },
			{{-1, ERROR, 7}, {15, SHIFT, 1}, {21, SHIFT, 2}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 10}, {16, SHIFT, 21}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 13}, {45, SHIFT, 22}, },
			{{-1, ERROR, 14}, {44, SHIFT, 23}, },
			{{-1, REDUCE, 2}, {20, SHIFT, 24}, {44, SHIFT, 25}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 4}, {44, SHIFT, 25}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 1}, {44, SHIFT, 28}, },
			{{-1, ERROR, 21}, {0, SHIFT, 8}, {1, SHIFT, 9}, {3, SHIFT, 11}, {45, SHIFT, 12}, },
			{{-1, REDUCE, 33}, {17, SHIFT, 31}, },
			{{-1, ERROR, 23}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 34}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 24}, {45, SHIFT, 45}, },
			{{-1, ERROR, 25}, {20, SHIFT, 24}, },
			{{-1, REDUCE, 6}, {44, SHIFT, 25}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 3}, {20, SHIFT, 24}, {44, SHIFT, 25}, },
			{{-1, REDUCE, 5}, {44, SHIFT, 25}, },
			{{-1, ERROR, 30}, {45, SHIFT, 47}, },
			{{-1, ERROR, 31}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 32}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 33}, {45, SHIFT, 67}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 35}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 36}, {45, SHIFT, 69}, },
			{{-1, REDUCE, 89}, {41, SHIFT, 70}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 39}, {44, SHIFT, 71}, },
			{{-1, ERROR, 40}, {44, SHIFT, 72}, },
			{{-1, REDUCE, 88}, {27, REDUCE, 90}, },
			{{-1, ERROR, 42}, {44, SHIFT, 73}, },
			{{-1, ERROR, 43}, {27, SHIFT, 74}, },
			{{-1, ERROR, 44}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 75}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 45}, {6, SHIFT, 77}, {25, SHIFT, 78}, },
			{{-1, REDUCE, 7}, {44, SHIFT, 25}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 48}, {45, SHIFT, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 50}, {18, SHIFT, 48}, {24, SHIFT, 49}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 51}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 52}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 69}, {27, REDUCE, 89}, {41, SHIFT, 70}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 34}, {12, SHIFT, 84}, },
			{{-1, REDUCE, 47}, {13, SHIFT, 85}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 60}, {28, SHIFT, 86}, {29, SHIFT, 87}, {30, SHIFT, 88}, {31, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 63}, {38, SHIFT, 94}, {39, SHIFT, 95}, {40, SHIFT, 96}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 66}, {8, SHIFT, 97}, {12, SHIFT, 84}, },
			{{-1, ERROR, 67}, {22, SHIFT, 98}, {23, SHIFT, 99}, },
			{{-1, ERROR, 68}, {10, SHIFT, 100}, {12, SHIFT, 84}, },
			{{-1, ERROR, 69}, {17, SHIFT, 101}, },
			{{-1, ERROR, 70}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {42, SHIFT, 102}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 74}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 77}, {44, SHIFT, 108}, },
			{{-1, ERROR, 78}, {0, SHIFT, 8}, {1, SHIFT, 9}, {3, SHIFT, 11}, {45, SHIFT, 12}, },
			{{-1, ERROR, 79}, {6, SHIFT, 110}, },
			{{-1, ERROR, 80}, {41, SHIFT, 111}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 59}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 83}, {12, SHIFT, 84}, {42, SHIFT, 112}, },
			{{-1, ERROR, 84}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 85}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 86}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 87}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 88}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 89}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 90}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 91}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 92}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 93}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 94}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 95}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 96}, {18, SHIFT, 48}, {24, SHIFT, 49}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 97}, {44, SHIFT, 126}, },
			{{-1, ERROR, 98}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 99}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, ERROR, 100}, {44, SHIFT, 129}, },
			{{-1, ERROR, 101}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, {12, SHIFT, 84}, {26, SHIFT, 131}, },
			{{-1, ERROR, 104}, {42, SHIFT, 132}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, {27, SHIFT, 133}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 108}, {7, SHIFT, 134}, {15, SHIFT, 135}, {45, SHIFT, 136}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 110}, {44, SHIFT, 141}, },
			{{-1, ERROR, 111}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {42, SHIFT, 142}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 46}, {13, SHIFT, 85}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 53}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 54}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 55}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 56}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 57}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 58}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 61}, {38, SHIFT, 94}, {39, SHIFT, 95}, {40, SHIFT, 96}, },
			{{-1, REDUCE, 62}, {38, SHIFT, 94}, {39, SHIFT, 95}, {40, SHIFT, 96}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 126}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 144}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 127}, {8, SHIFT, 146}, {12, SHIFT, 84}, },
			{{-1, ERROR, 128}, {8, SHIFT, 147}, {12, SHIFT, 84}, },
			{{-1, ERROR, 129}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 148}, {9, SHIFT, 35}, {11, SHIFT, 149}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 130}, {12, SHIFT, 84}, {44, SHIFT, 152}, },
			{{-1, ERROR, 131}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 133}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 135}, {0, SHIFT, 8}, {1, SHIFT, 9}, {2, SHIFT, 10}, {3, SHIFT, 11}, {19, SHIFT, 155}, {45, SHIFT, 12}, },
			{{-1, ERROR, 136}, {41, SHIFT, 156}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 138}, {44, SHIFT, 157}, },
			{{-1, ERROR, 139}, {44, SHIFT, 158}, },
			{{-1, ERROR, 140}, {7, SHIFT, 159}, {15, SHIFT, 135}, {45, SHIFT, 136}, },
			{{-1, ERROR, 141}, {7, SHIFT, 161}, {15, SHIFT, 135}, {45, SHIFT, 136}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 143}, {42, SHIFT, 163}, },
			{{-1, ERROR, 144}, {44, SHIFT, 164}, },
			{{-1, ERROR, 145}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 165}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 146}, {44, SHIFT, 166}, },
			{{-1, ERROR, 147}, {44, SHIFT, 167}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 149}, {9, SHIFT, 168}, {44, SHIFT, 169}, },
			{{-1, ERROR, 150}, {7, SHIFT, 170}, },
			{{-1, ERROR, 151}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 171}, {9, SHIFT, 35}, {11, SHIFT, 149}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 155}, {45, SHIFT, 173}, },
			{{-1, ERROR, 156}, {0, SHIFT, 8}, {1, SHIFT, 9}, {3, SHIFT, 11}, {42, SHIFT, 174}, {45, SHIFT, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 162}, {7, SHIFT, 178}, {15, SHIFT, 135}, {45, SHIFT, 136}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 165}, {44, SHIFT, 179}, },
			{{-1, ERROR, 166}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 180}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 167}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 182}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 168}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, REDUCE, 40}, {4, SHIFT, 32}, {5, SHIFT, 33}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 172}, {7, SHIFT, 186}, },
			{{-1, ERROR, 173}, {41, SHIFT, 187}, },
			{{-1, ERROR, 174}, {8, SHIFT, 188}, },
			{{-1, ERROR, 175}, {45, SHIFT, 189}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 177}, {0, SHIFT, 8}, {1, SHIFT, 9}, {3, SHIFT, 11}, {42, SHIFT, 190}, {45, SHIFT, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 180}, {44, SHIFT, 192}, },
			{{-1, ERROR, 181}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 193}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 182}, {44, SHIFT, 194}, },
			{{-1, ERROR, 183}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 195}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 184}, {10, SHIFT, 196}, {12, SHIFT, 84}, },
			{{-1, REDUCE, 41}, {4, SHIFT, 32}, {5, SHIFT, 33}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 187}, {0, SHIFT, 8}, {1, SHIFT, 9}, {3, SHIFT, 11}, {42, SHIFT, 197}, {45, SHIFT, 12}, },
			{{-1, ERROR, 188}, {44, SHIFT, 199}, },
			{{-1, REDUCE, 85}, {26, SHIFT, 200}, },
			{{-1, ERROR, 190}, {8, SHIFT, 201}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 193}, {44, SHIFT, 202}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 195}, {44, SHIFT, 203}, },
			{{-1, ERROR, 196}, {44, SHIFT, 204}, },
			{{-1, ERROR, 197}, {6, SHIFT, 205}, },
			{{-1, ERROR, 198}, {42, SHIFT, 206}, },
			{{-1, ERROR, 199}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 207}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 200}, {0, SHIFT, 8}, {1, SHIFT, 9}, {3, SHIFT, 11}, {45, SHIFT, 12}, },
			{{-1, ERROR, 201}, {44, SHIFT, 210}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 42}, {4, SHIFT, 32}, {5, SHIFT, 33}, {9, SHIFT, 35}, {11, SHIFT, 149}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, ERROR, 205}, {44, SHIFT, 213}, },
			{{-1, ERROR, 206}, {6, SHIFT, 215}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 208}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 216}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 210}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 217}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 43}, {4, SHIFT, 32}, {5, SHIFT, 33}, {9, SHIFT, 35}, {11, SHIFT, 149}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 22}, {4, SHIFT, 32}, {5, SHIFT, 33}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {35, SHIFT, 220}, {45, SHIFT, 37}, },
			{{-1, ERROR, 214}, {7, SHIFT, 223}, },
			{{-1, ERROR, 215}, {44, SHIFT, 213}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 218}, {4, SHIFT, 32}, {5, SHIFT, 33}, {7, SHIFT, 225}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {45, SHIFT, 37}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 220}, {18, SHIFT, 48}, {24, SHIFT, 49}, {34, SHIFT, 50}, {36, SHIFT, 51}, {41, SHIFT, 52}, {43, SHIFT, 53}, {45, SHIFT, 54}, {46, SHIFT, 55}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 22}, {4, SHIFT, 32}, {5, SHIFT, 33}, {9, SHIFT, 35}, {14, SHIFT, 36}, {15, SHIFT, 1}, {35, SHIFT, 220}, {45, SHIFT, 37}, },
			{{-1, ERROR, 223}, {44, SHIFT, 228}, },
			{{-1, ERROR, 224}, {7, SHIFT, 229}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 226}, {12, SHIFT, 84}, {44, SHIFT, 230}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 229}, {44, SHIFT, 231}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 18}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {7, 19}, },
			{{-1, 5}, {7, 20}, },
			{{-1, 16}, {17, 27}, {26, 27}, {29, 27}, {46, 27}, },
			{{-1, 137}, {140, 160}, {162, 160}, },
			{{-1, 214}, {215, 224}, },
			{{-1, 221}, {222, 227}, },
			{{-1, 38}, {44, 76}, {145, 76}, {151, 76}, {181, 76}, {183, 76}, {185, 76}, {208, 76}, {212, 76}, {218, 76}, {222, 76}, },
			{{-1, 39}, {0, 6}, {7, 6}, {108, 138}, {140, 138}, {141, 138}, {162, 138}, },
			{{-1, 40}, },
			{{-1, 150}, {151, 172}, {204, 211}, {212, 219}, },
			{{-1, 103}, {31, 56}, {32, 66}, {35, 68}, {52, 83}, {98, 127}, {99, 128}, {101, 130}, {168, 184}, {220, 226}, },
			{{-1, 57}, {84, 113}, },
			{{-1, 58}, {85, 114}, },
			{{-1, 59}, {50, 81}, },
			{{-1, 60}, },
			{{-1, 61}, {51, 82}, {86, 115}, {87, 116}, {88, 117}, {89, 118}, {90, 119}, {91, 120}, },
			{{-1, 62}, {92, 121}, {93, 122}, },
			{{-1, 63}, {94, 123}, {95, 124}, {96, 125}, },
			{{-1, 175}, {1, 13}, {21, 30}, {78, 109}, {135, 13}, },
			{{-1, 64}, },
			{{-1, 41}, {74, 105}, {133, 105}, },
			{{-1, 104}, {111, 143}, {131, 153}, },
			{{-1, 176}, {177, 191}, {187, 198}, {200, 209}, },
			{{-1, 65}, {23, 42}, {44, 42}, {126, 42}, {129, 42}, {145, 42}, {151, 42}, {166, 42}, {167, 42}, {169, 42}, {181, 42}, {183, 42}, {185, 42}, {199, 42}, {204, 42}, {208, 42}, {210, 42}, {212, 42}, {213, 42}, {218, 42}, {222, 42}, },
			{{-1, 43}, {74, 106}, {133, 106}, },
			{{-1, 107}, {133, 154}, },
			{{-1, 79}, },
			{{-1, 139}, },
			{{-1, 7}, },
			{{-1, 17}, {15, 26}, {20, 29}, {28, 46}, },
			{{-1, 44}, {126, 145}, {129, 151}, {166, 181}, {167, 183}, {169, 185}, {199, 208}, {204, 212}, {210, 218}, {213, 222}, },
			{{-1, 140}, {141, 162}, },
			{{-1, 177}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'dcl', 'Main'",
			"expecting: 'num', 'bool', 'list', 'text', id",
			"expecting: 'begin'",
			"expecting: EOF",
			"expecting: newline, EOF",
			"expecting: newline",
			"expecting: 'begin', id",
			"expecting: 'of'",
			"expecting: id",
			"expecting: 'class', newline, EOF",
			"expecting: 'num', 'bool', 'text', id",
			"expecting: 'to', newline",
			"expecting: 'while', 'for', 'end', 'if', 'set', 'dcl', id",
			"expecting: 'class'",
			"expecting: 'new', boolval, 'not', '-', '(', numval, id, textval",
			"expecting: 'do', 'then', 'or', 'and', ',', '.', '=', '!=', '>', '<', '>=', '<=', '-', '+', '/', '*', '%', '(', ')', newline",
			"expecting: 'while', 'for', 'end', 'if', 'else', 'set', 'dcl', 'return', id",
			"expecting: 'do', 'then', 'or', 'and', ',', '.', '=', '!=', '>', '<', '>=', '<=', '-', '+', '/', '*', '%', ')', newline",
			"expecting: '.'",
			"expecting: 'begin', 'is'",
			"expecting: 'do', 'then', 'or', 'and', ',', '=', '!=', '>', '<', '>=', '<=', '-', '+', '/', '*', '%', ')', newline",
			"expecting: 'new', boolval, '-', '(', numval, id, textval",
			"expecting: 'new', boolval, '(', numval, id, textval",
			"expecting: 'or', newline",
			"expecting: 'do', 'then', 'or', 'and', ',', ')', newline",
			"expecting: 'do', 'then', 'or', 'and', ',', '=', '!=', '>', '<', '>=', '<=', '-', '+', ')', newline",
			"expecting: 'do', 'or'",
			"expecting: 'upto', 'downto'",
			"expecting: 'then', 'or'",
			"expecting: 'to'",
			"expecting: 'new', boolval, 'not', '-', '(', ')', numval, id, textval",
			"expecting: '('",
			"expecting: 'do', 'then', 'or', 'and', ',', '-', '+', ')', newline",
			"expecting: 'or', ')'",
			"expecting: 'or', ',', ')'",
			"expecting: ')'",
			"expecting: 'end', 'dcl', id",
			"expecting: 'while', 'for', 'end', 'if', 'else', 'set', 'dcl', id",
			"expecting: 'num', 'bool', 'list', 'text', 'func', id",
			"expecting: 'if', newline",
			"expecting: 'end'",
			"expecting: 'num', 'bool', 'text', ')', id",
			"expecting: 'do'",
			"expecting: 'num', 'bool', 'text', ',', ')', id",
			"expecting: 'while', 'for', 'end', 'if', 'set', 'dcl', 'return', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 4, 5, 0, 6, 6, 7, 6, 6, 8, 5, 9, 4, 4, 0, 0, 4, 10, 11, 12, 8, 13, 4, 4, 9, 4, 8, 14, 14, 8, 4, 14, 8, 15, 16, 5, 5, 17, 5, 18, 12, 19, 4, 5, 8, 20, 21, 22, 14, 20, 15, 20, 23, 24, 24, 24, 24, 25, 20, 20, 20, 20, 26, 27, 28, 29, 30, 16, 16, 16, 8, 4, 16, 5, 10, 2, 31, 24, 32, 33, 14, 14, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 5, 14, 14, 5, 14, 17, 34, 35, 17, 17, 20, 36, 2, 5, 30, 20, 24, 24, 32, 32, 32, 32, 32, 32, 20, 20, 20, 20, 20, 12, 26, 26, 37, 23, 14, 17, 8, 4, 38, 31, 36, 5, 5, 36, 36, 20, 35, 5, 12, 5, 5, 5, 39, 40, 37, 16, 35, 20, 8, 41, 36, 36, 4, 36, 4, 36, 20, 16, 5, 12, 12, 14, 12, 5, 5, 40, 31, 42, 8, 41, 41, 4, 16, 5, 12, 5, 12, 28, 12, 5, 41, 5, 43, 42, 41, 16, 5, 16, 5, 5, 2, 35, 12, 10, 5, 16, 16, 37, 5, 2, 5, 12, 41, 12, 40, 37, 44, 40, 5, 5, 5, 12, 40, 14, 40, 44, 5, 40, 5, 23, 40, 36, 5, 40, 36, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
