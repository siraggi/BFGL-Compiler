/* This file was generated by SableCC (http://www.sablecc.org/). */

package grammar.ini.node;

import grammar.ini.analysis.Analysis;

@SuppressWarnings("nls")
public final class AIfStmt extends PStmt {
    private PConditional _conditional_;

    public AIfStmt() {
        // Constructor
    }

    public AIfStmt(
            @SuppressWarnings("hiding") PConditional _conditional_) {
        // Constructor
        setConditional(_conditional_);

    }

    @Override
    public Object clone() {
        return new AIfStmt(
                cloneNode(this._conditional_));
    }

    @Override
    public void apply(Switch sw) {
        ((Analysis) sw).caseAIfStmt(this);
    }

    public PConditional getConditional() {
        return this._conditional_;
    }

    public void setConditional(PConditional node) {
        if (this._conditional_ != null) {
            this._conditional_.parent(null);
        }

        if (node != null) {
            if (node.parent() != null) {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditional_ = node;
    }

    @Override
    public String toString() {
        return ""
                + toString(this._conditional_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child) {
        // Remove child
        if (this._conditional_ == child) {
            this._conditional_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild) {
        // Replace child
        if (this._conditional_ == oldChild) {
            setConditional((PConditional) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
